<!-- Content Header (Page header) -->
<section class="content-header">
  <h1>Evaluation <%= @evaluation.profiles.map(&:name).join(', ') %></h1>
  <ol class="breadcrumb" data-turbolinks="false">
    <li><%= link_to ('<i class="fa fa-dashboard"> </i>Dashboard').html_safe, root_path %></li>
    <li><%= link_to 'Evaluations', evaluations_path %></li>
    <li class="active">Evaluation</li>
  </ol>
</section>
<script>
var evaluation_id = '<%= @evaluation.id %>';
</script>
<!-- Main content -->
<section class="content container-fluid">
  <div class="row">
    <div class="col-md-3">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Evaluation Information</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <p>
            <strong>InSpec Version:</strong>
            <%= @evaluation.version %>
          </p>

          <p>
            <strong>Other Checks:</strong>
            <%= @evaluation.other_checks %>
          </p>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Platform</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <p>
            <strong>Name:</strong>
            <%= @evaluation.platform_name %>
          </p>

          <p>
            <strong>Release:</strong>
            <%= @evaluation.platform_release %>
          </p>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Statistics</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <p>
            <strong>Start Time:</strong>
            <%= @evaluation.start_time %>
          </p>
          <p>
            <strong>Duration:</strong>
            <%= @evaluation.statistics_duration %>
          </p>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Formats</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <p>
            <strong>View SSP:</strong>
            <%= link_to 'SSP', ssp_evaluation_path(@evaluation) %>
          </p>
          <p>
            <strong>Export CKL:</strong>
            <%= link_to 'CKL', evaluation_path(@evaluation, format: :ckl), :target => "_blank" %>
          </p>
          <p>
            <strong>Export XCCDF:</strong>
            <%= link_to 'XCCDF', evaluation_xccdf_path(@evaluation) %>
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Small boxes (Stat box) -->
  <div class="row">
    <div class="col-lg-3">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Compliance Level</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <div id="profile_gauge"></div>
        </div>
      </div>
    </div>

    <div class="col-xs-9">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Findings</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <div class="col-lg-2 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-green">
              <div class="inner">
                <ul class="horizontal-list">
                  <li><h3><%= @counts[:not_a_finding] %>&nbsp;</h3></li>
                  <li><h4>Not a Finding</h4></li>
                </ul>
                <p class="small-font">&nbsp;</p>
              </div>
            </div>
          </div>
          <!-- ./col -->
          <div class="col-lg-2 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-red">
              <div class="inner">
                <ul class="horizontal-list">
                  <li><h3><%= @counts[:open] %>&nbsp;</h3></li>
                  <li><h4>Open&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h4></li>
                </ul>
                <p class="small-font">&nbsp;</p>
              </div>
            </div>
          </div>
          <!-- ./col -->
          <div class="col-lg-2 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-med-grey">
              <div class="inner">
                <ul class="horizontal-list">
                  <li><h3><%= @counts[:not_reviewed] %>&nbsp;</h3></li>
                  <li><h4>Not Reviewed&nbsp;&nbsp;&nbsp;</h4></li>
                </ul>
                <p class="small-font">(can only be tested manually or disabled test)</p>
              </div>
            </div>
          </div>
          <!-- ./col -->
          <div class="col-lg-2 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-aqua">
              <div class="inner">
                <ul class="horizontal-list">
                  <li><h3><%= @counts[:not_applicable] %>&nbsp;</h3></li>
                  <li><h4>Not Applicable&nbsp;&nbsp;</h4></li>
                </ul>
                <p class="small-font">(zero impact: exception for this system and/or absent component)</p>
              </div>
            </div>
          </div>
          <!-- ./col -->
          <div class="col-lg-2 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-med-grey">
              <div class="inner">
                <ul class="horizontal-list">
                  <li><h3><%= @counts[:not_tested] %>&nbsp;</h3></li>
                  <li><h4>Not Tested&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h4></li>
                </ul>
                <p class="small-font">(profile error)</p>
              </div>
            </div>
          </div>
          <!-- ./col -->
        </div>
        <!-- /.row -->
      </div>
    </div>
  </div>
  <div class="row" id="all_controls_row">
    <div class="col-lg-4">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Control Status</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <div id="status_pie"></div>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Control Severity</h3>
        </div>
        <button id="clear_filters_button" type="button" class="btn btn-primary floating">Clear Filters</button>
        <!-- /.box-header -->
        <div class="box-body">
          <div id="severity_pie"></div>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Control Filter</h3>
          <% if @filter_label %>
              <span class="span-title">Active Filter:</span></br>
              <h4><%= @filter_label %></h4>
              <br>
              <%= link_to "Clear Filter", clear_filter_evaluation_path(@evaluation), class: "btn btn-primary" %>
          <% end %>
        </div>
        <div class="box-body no-top-padding">
          <div class="col-md-4">
            <%= form_for :filter, url: filter_evaluation_path(@evaluation), remote: true do |form| %>
              <div class="row">
                <div class="box-body">
                  <div class="col-md-2 padded-right">
                    <% @nist_hash["children"].first((@nist_hash["children"].size/2).to_i).each do |family| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box 'family', {:id=> "fam_cb_#{family['name']}", :checked=>false, :multiple => true}, family['name'], nil %>
                          <%= family['name'] %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                  <div class="col-md-2 padded-right">
                    <% @nist_hash["children"].last((@nist_hash["children"].size/2).to_i).each do |family| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box 'family', {:id=> "fam_cb_#{family['name']}", :checked=>false, :multiple => true}, family['name'], nil %>
                          <%= family['name'] %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-4">
                  <%= button_tag(type: "submit", class: "btn btn-primary") do %>
                    <i class="fa fa-edit"></i> Filter by Family
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
          <div class="col-md-6">
            <%= form_for :filter_group, url: filter_select_evaluation_path(@evaluation), remote: true do |form| %>
              <div class="box-body">
                <p>
                  <h4>Select Filter Group</h4>
                  <%= form.select :id, FilterGroup.all.collect {|u| [u.name, u.id]}, { :prompt => 'Select' } %>
                  <h4>Or</h4>
                  <h4>Select Filter</h4>
                  <%= form.select :filter_ids, Filter.all.collect {|u| [u.to_s, u.id]}, { :prompt => 'Select' } %>
                  <br>
                </p>
                <%= button_tag(type: "submit", class: "btn btn-primary") do %>
                  <i class="fa fa-edit"></i> Filter by Selected
                <% end %>
                <h4>Or</h4>
                <button type="button" id="build_btn" class="btn btn-block btn-info">Build Filter</button>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="row", style="display:none;" id="filter_row">
    <div class="col-md-12">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Control Filters</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <%= form_for :filter, url: filter_evaluation_path(@evaluation), remote: true do |form| %>
            <div class="row">
              <div class="col-sm-1">
                <div class="box-header">
                  <h3 class="box-title">Families</h3>
                </div>
                <div class="form-group">
                  <div class="col-md-2 padded-right">
                    <% @nist_hash["children"].first((@nist_hash["children"].size/2).to_i).each do |family| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box 'family', {:id=> "fam_cb_#{family['name']}", :checked=>false, :multiple => true, :onclick=>'filterNumbers()'}, family['name'], nil %>
                          <%= family['name'] %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                  <div class="col-md-2 padded-right">
                    <% @nist_hash["children"].last((@nist_hash["children"].size/2).to_i).each do |family| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box 'family', {:id=> "fam_cb_#{family['name']}", :checked=>false, :multiple => true, :onclick=>'filterNumbers()'}, family['name'], nil %>
                          <%= family['name'] %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
              <div class="col-sm-2">
                <div class="box-header">
                  <h3 class="box-title">Numbers</h3>
                </div>
                <div class="form-group">
                  <div class="col-md-2 padded-right">
                    <% (1..11).each do |num| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("number", {:id=> "num_cb_#{num}", :checked=>false, :multiple => true}, num, nil) %>
                          <%= num %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                  <div class="col-md-2 padded-right">
                    <% (12..22).each do |num| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("number", {:id=> "num_cb_#{num}", :checked=>false, :multiple => true}, num, nil) %>
                          <%= num %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                  <div class="col-md-2 padded-right">
                    <% (23..33).each do |num| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("number", {:id=> "num_cb_#{num}", :checked=>false, :multiple => true}, num, nil) %>
                          <%= num %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                  <div class="col-md-2 padded-right">
                    <% (34..44).each do |num| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("number", {:id=> "num_cb_#{num}", :checked=>false, :multiple => true}, num, nil) %>
                          <%= num %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
              <div class="col-sm-1">
                <div class="box-header">
                  <h3 class="box-title">Part</h3>
                </div>
                <div class="form-group">
                  <div class="col-md-2">
                    <% ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'].each do |fam| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("sub_fam", {:id=> "sub_fam_cb_#{fam}", :checked=>false, :multiple => true}, fam, nil) %>
                          <%= fam %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
              <div class="col-sm-1">
                <div class="box-header">
                  <h3 class="box-title">Sub-Part</h3>
                </div>
                <div class="form-group">
                  <div class="col-md-2">
                    <% (1..10).each do |num| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("sub_num", {:id=> "sub_num_cb_#{num}", :checked=>false, :multiple => true}, num, nil) %>
                          <%= num %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
              <div class="col-sm-1">
                <div class="box-header">
                  <h3 class="box-title">Enhancement</h3>
                </div>
                <div class="form-group">
                  <div class="col-md-2 padded-right">
                    <% (1..12).each do |enhancement| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("enhancement", {:id=> "enhancement_cb_#{enhancement}", :checked=>false, :multiple => true, :onclick=>'yesEnhancements()'}, enhancement, nil) %>
                          <%= "(#{enhancement})" %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                  <div class="col-md-2 padded-right">
                    <% (13..24).each do |enhancement| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("enhancement", {:id=> "enhancement_cb_#{enhancement}", :checked=>false, :multiple => true, :onclick=>'yesEnhancements()'}, enhancement, nil) %>
                          <%= "(#{enhancement})" %>
                        </label>
                      </div>
                    <% end %>
                    <div class="checkbox">
                      <label>
                        <%= form.check_box("enhancement", {:id=> "none_enhance_cb", :checked=>false, :multiple => true, :onclick=>'noEnhancements()'}, "none", nil) %>
                        None
                      </label>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-sm-1">
                <div class="box-header">
                  <h3 class="box-title">Part</h3>
                </div>
                <div class="form-group">
                  <div class="col-md-2">
                    <% ['a', 'b', 'c', 'd', 'e', 'f'].each do |fam| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("enh_sub_fam", {:id=> "enh_sub_fam_cb_#{fam}", :checked=>false, :multiple => true, :disabled=>true}, fam, nil) %>
                          <%= fam %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
              <div class="col-sm-1">
                <div class="box-header">
                  <h3 class="box-title">Sub-Part</h3>
                </div>
                <div class="form-group">
                  <div class="col-md-2">
                    <% (1..5).each do |num| %>
                      <div class="checkbox">
                        <label>
                          <%= form.check_box("enh_sub_num", {:id=> "enh_sub_num_cb_#{num}", :checked=>false, :multiple => true, :disabled=>true}, num, nil) %>
                          <%= num %>
                        </label>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-sm-1">
                <div class="checkbox">
                  <label>
                    <%= form.check_box("save_filter", {:id=> "save_filter_cb", :checked=>false}, "save", nil) %>
                    Save Filter
                  </label>
                </div>
              </div>
              <div class="col-sm-1">
                <%= button_tag(type: "submit", class: "btn btn-primary pull-right margin-right") do %>
                  <i class="fa fa-edit"></i> Filter by Selected
                <% end %>
              </div>
              <div class="col-sm-1">
                <button type="button" id="close_build_btn" class="btn btn-block btn-info">Close</button>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-md-12">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Controls</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <div id="chart"></div>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-xs-12">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Profile Controls</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body" data-turbolinks="false">
          <table id="controls" class="table table-bordered table-striped">
            <thead>
            <tr>
              <th>Status</th>
              <th>Title</th>
              <th>Control ID</th>
              <th>Severity</th>
              <th>Run Time</th>
              <th>NIST Refs</th>
              <th class="hidden">Details</th>
            </tr>
            </thead>
            <tbody>
              <% @controls.each do |control_id, hsh| %>
                <% control = hsh[:control] %>
                <% sym = hsh[:status_symbol] %>
                <tr class="<%= control.severity.capitalize %> <%= status_label(sym) %>" id="<%= control.id %>">
                  <td><button class="<%= status_btn(sym) %>" style="width:120px" onclick="show_details('<%= control.profile_id %>', '<%= control.id %>');"><%= status_label(sym) %></button></td>
                  <td><%= control.title %></td>
                  <td><%= link_to control.control_id, profile_control_path(control.profile_id, control.id) %></td>
                  <td><%= control.severity %></td>
                  <td><%= control.run_time %></td>
                  <td><%= control.nist_tags.join(', ') %></td>
                  <td class="hidden"><%= control.code %></td>
                </tr>
              <% end %>
            </tbody>
            <tfoot>
            <tr>
              <th>Status</th>
              <th>Title</th>
              <th>Control ID</th>
              <th>Severity</th>
              <th>Run Time</th>
              <th>NIST Refs</th>
              <th class="hidden">Details</th>
            </tr>
          </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- /.content -->
<script>

//var oTable = $('#controls').DataTable();
var cats = {"High": true, "Medium": true, "Low": true};
var stats = {"Not A Finding": true, "Not Applicable": true, "Open": true, "Not Reviewed": true, "Not Tested": true};
var shown_id = null;
var loaded = null;
var compliance_count = 0.0;
var total_count = 0;
var nist_counts = {"AC": 25, "AU": 16, "AT": 5, "CM": 11, "CP": 13, "IA": 11, "IR": 10, "MA": 6, "MP": 8,
  "PS": 8, "PE": 20, "PL": 9, "PM": 16, "RA": 6, "CA": 9, "SC": 44, "SI": 17, "SA": 22};

function filterNumbers() {
  count = 0;
  checked = null;
  $('input:checkbox[id^="fam_cb_"]:checked').each(function(){
    count += 1;
    checked = $(this).val();
  });
  if(count == 1) {
    $('input:checkbox[id^="num_cb_"]').each(function(){
      if($(this).val() <= nist_counts[checked]) {
        $(this).prop("disabled", false);
      } else {
        $(this).prop('checked', false);
        $(this).prop("disabled", true);
      }
      $('input:checkbox[id^="sub_fam_cb_"]').each(function(){
        $(this).prop("disabled", false);
      });
      $('input:checkbox[id^="sub_num_cb_"]').each(function(){
        $(this).prop("disabled", false);
      });
    });
  } else if (count > 1) {
    $('input:checkbox[id^="num_cb_"]').each(function(){
      $(this).prop('checked', false);
      $(this).prop("disabled", true);
    });
    $('input:checkbox[id^="sub_fam_cb_"]').each(function(){
      $(this).prop('checked', false);
      $(this).prop("disabled", true);
    });
    $('input:checkbox[id^="sub_num_cb_"]').each(function(){
      $(this).prop('checked', false);
      $(this).prop("disabled", true);
    });
  } else {
    $('input:checkbox[id^="num_cb_"]').each(function(){
      $(this).prop("disabled", false);
    });
  }
}

function noEnhancements() {
  $('input:checkbox[id^="enhancement_cb_"]').each(function(){
    $(this).prop('checked', false);
  });
  $('input:checkbox[id^="enh_sub_fam_cb_"]').each(function(){
    $(this).prop('checked', false);
    $(this).prop("disabled", true);
  });
  $('input:checkbox[id^="enh_sub_num_cb_"]').each(function(){
    $(this).prop('checked', false);
    $(this).prop("disabled", true);
  });
}

function yesEnhancements() {
  count = 0;
  $('input:checkbox[id^="enhancement_cb_"]:checked').each(function(){
    count += 1;
  });
  $('input:checkbox[id^="none_enhance_cb"]').each(function(){
    $(this).prop('checked', false);
  });
  if(count > 1){
    $('input:checkbox[id^="enh_sub_fam_cb_"]').each(function(){
      $(this).prop('checked', false);
      $(this).prop("disabled", true);
    });
    $('input:checkbox[id^="enh_sub_num_cb_"]').each(function(){
      $(this).prop('checked', false);
      $(this).prop("disabled", true);
    });
  } else {
    $('input:checkbox[id^="enh_sub_fam_cb_"]').each(function(){
      $(this).prop("disabled", false);
    });
    $('input:checkbox[id^="enh_sub_num_cb_"]').each(function(){
      $(this).prop("disabled", false);
    });
  }
}

function show_details(profile_id, control_id) {
  hsh = "#" + control_id;
  url = '/profiles/' + profile_id + '/controls/' + control_id + '/details/evaluation/' + evaluation_id;
  var tr = $(hsh);
  if ($('#details_row').length) {
    $('#details_row').remove();
  }
  if (control_id != shown_id) {
    shown_id = control_id;
    $.ajax(url, {
        success: function(data) {
          tr.after('<tr id="details_row" role="row"><td colspan="5" id="control_details">' + detailsData + '</td></tr>');
          Prism.highlightAll();
        },
        error: function() {
          console.log("Error occured");
        }
     });
   } else {
     shown_id = null;
   }
}

function clear_cat_filter(bool) {
  cats = {"High": bool, "Medium": bool, "Low" : bool};
}

function clear_stat_filter(bool) {
  stats = {"Not A Finding": bool, "Not Applicable": bool, "Open": bool, "Not Reviewed": bool, "Not Tested": bool};
}

function filter_table(category, status) {
  if (category) {
    clear_cat_filter(false);
    cats[category] = true;
  }
  if (status) {
    clear_stat_filter(false);
    stats[status] = true;
  }
}

$.fn.dataTableExt.afnFiltering.push(
    function( oSettings, aData, iDataIndex ) {
      var nTr = oSettings.aoData[ iDataIndex ].nTr;
      var cats_bool = true;
      var stats_bool = true;
      if ($(nTr).hasClass('High')) {
        cats_bool = cats['High'];
      } else if ($(nTr).hasClass('Medium')) {
        cats_bool = cats['Medium'];
      } else if ($(nTr).hasClass('Low')) {
        cats_bool = cats['Low'];
      }
      if ($(nTr).hasClass('Not A Finding')) {
        stats_bool = stats['Not A Finding'];
      } else if ($(nTr).hasClass('Not Applicable')) {
        stats_bool = stats['Not Applicable'];
      } else if ($(nTr).hasClass('Open')) {
        stats_bool = stats['Open'];
      } else if ($(nTr).hasClass('Not Reviewed')) {
        stats_bool = stats['Not Reviewed'];
      } else if ($(nTr).hasClass('Not Tested')) {
        stats_bool = stats['Not Tested'];
      }
      return cats_bool && stats_bool;
    }
);

document.addEventListener("turbolinks:load", function() {
  if (loaded) {
    return;
  } else {
    loaded = true;
  }

  if($('[id^=controls_wrapper]').length == 0) {
    $('#controls').DataTable({
      'paging'      : true,
      'lengthChange': false,
      'searching'   : true,
      'ordering'    : true,
      'info'        : true,
      'autoWidth'   : false
    });
  }

  $("#build_btn").click(function(){
    console.log("show builder");
    document.getElementById("filter_row").style.display = 'block';
  });

  $("#close_build_btn").click(function(){
    console.log("Close builder");
    document.getElementById("filter_row").style.display = 'none';
  });

  $("#clear_filters_button").click(function() {
    if (currentDepth == 0) {
      document.getElementById("clear_filters_button").style.visibility = "hidden";
      clear_cat_filter(true);
      clear_stat_filter(true);
      reload_views(null);
    } else {
      alert("You must be at the top level of the chart to clear the filters");
    }
  });

  String.prototype.capitalize = function() {
      return this.charAt(0).toUpperCase() + this.slice(1);
  }

  String.prototype.titleize = function() {
      var string_array = this.split('_');
      string_array = string_array.map(function(str) {
         return str.capitalize();
      });

      return string_array.join(' ');
  }

  function draw_status_pie_chart(d)
  {
    not_app = 0;
    not_rev = 0;
    not_find = 0;
    not_test = 0;
    open = 0;
    if (d.children) {
      for(var i=0, len=d.children.length; i < len; i++) {
        child1 = d.children[i];
        if (child1.children) {
          for(var j=0, len2=child1.children.length; j < len2; j++) {
            child2 = child1.children[j];
            if (child2.children) {
              for(var k=0, len3=child2.children.length; k < len3; k++) {
                child3 = child2.children[k];
                status_value = child3.status_value;
                if (status_value == 0.0) {
                  not_test += 1;
                } else if (status_value == 0.2) {
                  not_app += 1;
                } else if (status_value == 0.4) {
                  not_rev += 1;
                } else if (status_value == 0.6) {
                  not_find += 1;
                } else if (status_value == 0.8) {
                  open += 1;
                }
              }
            }
          }
        }
      }
    }
    //var not_app = accumulate_status(d, 0.2);
    //var not_rev = accumulate_status(d, 0.4);
    //var not_find = accumulate_status(d, 0.6);
    //var open = accumulate_status(d, 0.8);
    total_count = not_find + not_rev + open + not_test;
    compliance_count = (not_find / total_count) * 100;
    console.log("not_find: " + not_find + ", open: " + open + ", not_rev: " + not_rev + ", not_test: " + not_test + ", total: " + total_count);
    console.log("compliance_count = " + not_find + " / " + total_count + " = " + compliance_count);
    status_data = [
                  ['Not A Finding',  not_find],
                  ['Open',           open],
                  ['Not Reviewed',   not_rev],
                  ['Not Applicable', not_app],
                  ['Not Tested',     not_test],
                  ];
    console.log("status_data = " + status_data);
    c3.generate(
    {
      bindto: '#status_pie',
      data: {
          columns: status_data,
          type : 'donut',
          onclick: function (d) {
            if (currentDepth == 0) {
              document.getElementById("clear_filters_button").style.visibility = "visible";
              reload_views(null, d.id);
            }
          },
      },
      oninit: function () {
        this.meetsArcLabelThreshold = function (value) { return value > 0; };
      },
      color:
      {
        pattern: ['rgb(137, 204, 81)', 'rgb(255, 0, 41)', 'rgb(140, 140, 140)', 'rgb(153, 204, 255)', 'rgb(145, 145, 145)']
      },
      size:
      {
        height: 280
      },
      donut: {
        title: 'Status',
        label: {
          format: function (value) { return value; }
        }
      }
    });
  }

  function draw_severity_pie_chart(d)
  {
    high = 0;
    medium = 0;
    low = 0;
    ary = [];
    if (d.children) {
      for(var i=0, len=d.children.length; i < len; i++) {
        child1 = d.children[i];
        if (child1.children) {
          for(var j=0, len2=child1.children.length; j < len2; j++) {
            child2 = child1.children[j];
            if (child2.children) {
              for(var k=0, len3=child2.children.length; k < len3; k++) {
                child3 = child2.children[k];
                if (!(ary.indexOf(child3.name) >= 0)) {
                  ary.push(child3.name);
                  if (child3.children) {
                    impact = child3.children[0].impact;
                    if (impact <= 0.4) {
                      low += 1;
                    } else if (impact < 0.7) {
                      medium += 1;
                    } else if (impact >= 0.7) {
                      high += 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    severity_data = [
                    ['High',   high],
                    ['Medium',  medium],
                    ['Low', low],
                ];

    c3.generate(
    {
      bindto: '#severity_pie',

      data:
      {
        columns: severity_data,
        type : 'donut',
        onclick: function (d)
        {
          if (currentDepth == 0) {
            document.getElementById("clear_filters_button").style.visibility = "visible";
            reload_views(d.id, null);
          }
        },
      },
      color:
      {
          pattern: ['#003366', '#0080FF', '#99CCFF']
      },
      size:
      {
        height: 280
      },
      donut:
      {
        title: "Severity",
        label:
        {
          format: function (value, ratio, id)
          {
            return d3.format()(value);
          }
        }
      }
    });
  }

  function draw_compliance_pie_chart()
  {
    compliance_data = [
                  ['Compliance', compliance_count]
                  ];
    c3.generate({
      bindto: '#profile_gauge',

      data:
      {
        columns: compliance_data,
        type: 'gauge',
      },

      color:
      {
          pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
          threshold: {
              values: [30, 40, 70, 100]
          }
      },
      size:
      {
          height: 193
      }
    });
  }

  // functions
	function initialize(root) {
		root.x = root.y = 0;
		root.dx = width;
		root.dy = height;
		root.depth = 0;
	}

  // Aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  // We also take a snapshot of the original children (_children) to avoid
  // the children being overwritten when when layout is computed.
  function accumulate(d) {
		return (d._children = d.children)
		  // recursion step, note that p and v are defined by reduce
			? d.value = d.children.reduce(function(p, v) {return p + accumulate(v); }, 0)
			: d.value
	}

  // Compute the treemap layout recursively such that each group of siblings
  // uses the same size (1×1) rather than the dimensions of the parent cell.
  // This optimizes the layout for the current zoom state. Note that a wrapper
  // object is created for the parent node for each group of siblings so that
  // the parent’s dimensions are not discarded as we recurse. Since each group
  // of sibling was laid out in 1×1, we must rescale to fit using absolute
  // coordinates. This lets us use a viewport to zoom.
  function layout(d) {
		if (d._children) {
		  // treemap nodes comes from the treemap set of functions as part of d3
		  treemap.nodes({_children: d._children});
		  d._children.forEach(function(c) {
			c.x = d.x + c.x * d.dx;
			c.y = d.y + c.y * d.dy;
			c.dx *= d.dx;
			c.dy *= d.dy;
			c.parent = d;
			// recursion
			layout(c);
		  });
		}
	}

  // Colors are based on the 'impact' at the leaf level. At higher levels, the
  // average impact of the children is calculated and used in the color range.
  // If there is no impact, the default color is grey
  function get_color(obj) {
    if ("status_value" in obj) {
      if (obj['status_value'] > 0) {
        return color(obj['status_value']);
      }
    }
    return "#bbbbbb";
  }

	function colorIncrements(d){
		return (colorDomain[colorDomain.length - 1] - colorDomain[0])/18*d + colorDomain[0];
	}

  // determines if white or black will be better contrasting color
	function getContrast50(hexcolor){
		return (parseInt(hexcolor.replace('#', ''), 16) > 0xffffff/3) ? 'black':'white';
	}

  function showCon(d) {
    console.log(d.name + ": impact: " + d.impact + ", value:"  + d.value);
    if (d._children) {
      d._children.forEach(function(c) {
        console.log(c.name + ": impact: " + c.impact + ", value:"  + c.value);
        // recursion
        showCon(c);
      });
    }
  }

  var obj = document.getElementById('chart');
	var divWidth = obj.offsetWidth;

	var margin = {top: 30, right: 0, bottom: 20, left: 0},
		width = divWidth -25,
		height = 540 - margin.top - margin.bottom,
    currentDepth = 0,
		formatNumber = d3.format(",%"),
		colorDomain = [0.2, 0.4, 0.6, 0.8],
    //colorRange = ['#dda8db', '#ebf2f7', '#9cbdd9'],
    colorRange = ['#99CCFF', '#8C8C8C', '#99CC66', '#FF0033'],
		//colorRange = ['green', 'orange', 'red'],
    severity = {'low': 1, 'medium': 2, 'high': 3},
		transitioning,
    root, dataset;

	// sets x and y scale to determine size of visible boxes
	var x = d3.scale.linear()
		.domain([0, width])
		.range([0, width]);

	var y = d3.scale.linear()
		.domain([0, height])
		.range([0, height]);

	// adding a color scale
	var color = d3.scale.linear()
		.domain(colorDomain)
		.range(colorRange);

  var treemap, svg, grandparent, legend;

  drawTreemap(null);
  //drawLegend();

  function reload_views(category, status) {
    drawTreemap(category, status);
    filter_table(category, status);
    $('#controls').DataTable().draw();
    var datatable = $('#controls').dataTable().api();
    //datatable.clear();
    //datatable.rows.add(dataSet);
    datatable.draw();

  }

  function drawTreemap(category, status) {
    console.log("drawTreemap");
    d3.selectAll("svg").remove();
  	// introduce color scale here
  	treemap = d3.layout.treemap()
  		.children(function(d, depth) { return depth ? null : d._children; })
  		.sort(function(a, b) { return b.name.localeCompare(a.name); })
  		.ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
  		.round(false);

  	svg = d3.select("#chart").append("svg")
  		.attr("width", width + margin.left + margin.right)
  		.attr("height", height + margin.bottom + margin.top)
  		.style("margin-left", -margin.left + "px")
  		.style("margin.right", -margin.right + "px")
  	  .append("g")
  		.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
  		.style("shape-rendering", "crispEdges");

  	grandparent = svg.append("g")
  		.attr("class", "grandparent");

  	grandparent.append("rect")
  		.attr("y", -margin.top)
  		.attr("width", width)
  		.attr("height", margin.top);

  	grandparent.append("text")
  		.attr("x", 6)
  		.attr("y", 6 - margin.top)
  		.attr("dy", ".75em");

    loadTreemapData(category, status);
  }

  function loadTreemapData(category, status) {
    api_path = "<%= root_path %>" + "evaluations/" + evaluation_id + "/nist";
    if (category) {
      api_path += "/category/" + encodeURIComponent(category);
    }
    if (status) {
      api_path += "/status/" + encodeURIComponent(status);
    }
    api_path += ".json";
    console.log("loadTreemapData from " + api_path);
  	d3.json(api_path, function(data) {
      root = data
      initialize(root);
  	  accumulate(root);
      draw_status_pie_chart(root);
      draw_severity_pie_chart(root);
      draw_compliance_pie_chart();
  	  layout(root);
  	  display(root);

  	  function display(d) {
    		grandparent
    			.datum(d.parent)
    			.on("click", transition)
    		    .select("text")
    			.text(name(d))

    		// color header based on grandparent's impact
    		grandparent
    		  .datum(d.parent)
    		  .select("rect")
    		  .attr("fill", function(){ return get_color(d) })

    		var g1 = svg.insert("g", ".grandparent")
    			.datum(d)
    			.attr("class", "depth");

    		var g = g1.selectAll("g")
    			.data(d._children)
    		    .enter().append("g");

    		g.filter(function(d) { return d._children; })
    			.classed("children", true)
    			.on("click", transition);

    		g.selectAll(".child")
    			.data(function(d) { return d._children || [d]; })
    		  .enter().append("rect")
    			.attr("class", "child")
    			.call(rect);


    		g.append("rect")
    			.attr("class", "parent")
    			.call(rect)
    		  .append("title");

    		/* Adding a foreign object instead of a text object, allows for text wrapping */
    		g.append("foreignObject")
    				.call(rect)
    				/* open new window based on the json's URL value for leaf nodes */
    				/* Firefox displays this on top
    				.on("click", function(d) {
    					if(!d.children){
    						window.open(d.url);
    				}
    			})*/
    			.attr("class","foreignobj")
    			.append("xhtml:div")
    			.attr("dy", ".75em")
    			.html(function(d) {
            var colr = getContrast50(get_color(d));
            if (d.desc && width > 750) {
              return  ' <p class="title" style="color:' + colr + '"> ' + d.name + '</p>' +
                ' <p style="color:' + colr + '"> ' + d.desc + '</p>';
            } else {
              if (d.impact) {
                return ' <p class="title" style="color:' + colr + '"> ' + d.name + '</p>' +
                  ' <p style="color:' + colr + '">Title: ' + d.title + '</p>' +
                  ' <p style="color:' + colr + '">Description: ' + d.description + '</p>' +
                  ' <p style="color:' + colr + '">Impact: ' + d.impact + '</p>' +
                  ' <p style="color:' + colr + '">Status: ' + d.status_symbol.titleize() + '</p>' +
                  ' <p style="color:' + colr + '">Check Text: ' + d.check + '</p>' +
                  ' <p style="color:' + colr + '">Fix Text: ' + d.fix + '</p>' +
                  ' <p style="color:' + colr + '">NIST Ref: ' + d.nist + '</p>';
              } else {
                return ' <p class="title" style="color:' + colr + '"> ' + d.name + '</p>';
              }
            }
    				;})
    			.attr("class","textdiv"); //textdiv class allows us to style the text easily with CSS

    		function transition(d) {
          currentDepth = d.depth;
    		  if (transitioning || !d) return;
    		  transitioning = true;

    		  var g2 = display(d),
    			  t1 = g1.transition().duration(650),
    			  t2 = g2.transition().duration(650);

    		  // Update the domain only after entering new elements.
    		  x.domain([d.x, d.x + d.dx]);
    		  y.domain([d.y, d.y + d.dy]);

    		  // Enable anti-aliasing during the transition.
    		  svg.style("shape-rendering", null);

    		  // Draw child nodes on top of parent nodes.
    		  svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

    		  // Fade-in entering text.
    		  g2.selectAll("text").style("fill-opacity", 0);
    		  g2.selectAll("foreignObject div").style("display", "none"); /*added*/

    		  // Transition to the new view.
    		  t1.selectAll("text").call(text).style("fill-opacity", 0);
    		  t2.selectAll("text").call(text).style("fill-opacity", 1);
    		  t1.selectAll("rect").call(rect);
    		  t2.selectAll("rect").call(rect);

    		  /* Foreign object */
    		  t1.selectAll(".textdiv").style("display", "none"); /* added */
    		  t1.selectAll(".foreignobj").call(foreign); /* added */
    		  t2.selectAll(".textdiv").style("display", "block"); /* added */
    		  t2.selectAll(".foreignobj").call(foreign); /* added */

    		  // Remove the old node when the transition is finished.
    		  t1.remove().each("end", function() {
    			  svg.style("shape-rendering", "crispEdges");
    			  transitioning = false;
    		  });
    		}

    		return g;
  	  }

    	function text(text) {
    		text.attr("x", function(d) { return x(d.x) + 6; })
    		.attr("y", function(d) { return y(d.y) + 6; });
    	}

  	  function rect(rect) {
    		rect.attr("x", function(d) { return x(d.x); })
    			.attr("y", function(d) { return y(d.y); })
    			.attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
    			.attr("height", function(d) { return y(d.y + d.dy) - y(d.y); })
    			.attr("fill", function(d){return get_color(d);});
  	  }

  	  function foreign(foreign){ /* added */
  			foreign.attr("x", function(d) { return x(d.x); })
  			.attr("y", function(d) { return y(d.y); })
  			.attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
  			.attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
  		}

  	  function name(d) {
    		return d.parent
    			? d.name + (d.desc ? ": " + d.desc : "") + " -  Click header to zoom out"
    			: d.name + (d.desc ? ": " + d.desc : "")  + " -  Click in boxes zoom";
  	  }

  	  function nameSave(d) {
    		return d.parent
    			? name(d.parent) + " - " + d.name + (d.desc ? ": " + d.desc : "") + " -  Click header to zoom out"
    			: d.name + (d.desc ? ": " + d.desc : "");
  	  }

  	});
  }
});

</script>
