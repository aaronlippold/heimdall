require 'factory_bot_rails'
require 'simplecov'
require 'webmock/rspec'
WebMock.disable_net_connect!(allow_localhost: true)
SimpleCov.start
# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  # config.mock_with :rspec do |mocks|
  # Prevents you from mocking or stubbing a method that does not exist on
  # a real object. This is generally recommended, and will default to
  # `true` in RSpec 4.
  #  mocks.verify_partial_doubles = true
  # end

  config.mock_with :mocha

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  config.include FactoryBot::Syntax::Methods
  config.before(:suite) do
    DatabaseCleaner.clean_with(:truncation)
  end
  config.before(:each) do
    DatabaseCleaner.strategy = :truncation
  end
  config.before(:each, js: true) do
    DatabaseCleaner.strategy = :truncation
  end

  # This block must be here, do not combine with the other `before(:each)` block.
  # This makes it so Capybara can see the database.
  config.before(:each) do
    DatabaseCleaner.start
  end
  config.after(:each) do
    DatabaseCleaner.clean
  end

  config.before(:each) do
    stub_request(:get, /api.github.com/)
      .with(headers: { 'Accept'=>'*/*', 'User-Agent'=>'Ruby' })
      .to_return(status: 200, body: 'stubbed response', headers: {})

    stub_request(:get, 'https://gitlab.company.com/api/v3/projects')
      .with(headers: {
              'Accept'=>'application/json',
              'Authorization'=>'Bearer MyString5345345645766',
              'Content-Type'=>'application/x-www-form-urlencoded',
              'User-Agent'=>'Gitlab Ruby Gem 4.3.0'
            })
      .to_return(status: 200, body: '', headers: {})

    stub_request(:get, 'https://gitlab.company.com/api/v3/projects')
      .with(headers: {
              'Accept'=>'application/json',
              'Authorization'=>'Bearer MyString5345345645766',
              'Content-Type'=>'application/x-www-form-urlencoded',
              'User-Agent'=>'Gitlab Ruby Gem 4.4.0'
            })
      .to_return(status: 200, body: '', headers: {})

    stub_request(:get, 'https://api.github.com/user/repos')
      .with(headers: {
              'Accept'=>'application/vnd.github.v3+json',
              'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'Authorization'=>'token MyString5345345645766',
              'Content-Type'=>'application/json',
              'User-Agent'=>'Octokit Ruby Gem 4.8.0'
            })
      .to_return(status: 200, body: '', headers: {})
    stub_request(:get, 'https://api.github.com/user/repos')
      .with(headers: {
              'Accept'=>'application/vnd.github.v3+json',
              'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'Authorization'=>'token MyString5345345645766',
              'Content-Type'=>'application/json',
              'User-Agent'=>'Octokit Ruby Gem 4.9.0'
            })
      .to_return(status: 200, body: '', headers: {})
    stub_request(:get, 'https://gitlab.company.com/api/v3/projects/12187/repository/tree')
      .with(headers: {
              'Accept'=>'application/json',
              'Authorization'=>'Bearer MyString5345345645766',
              'Content-Type'=>'application/x-www-form-urlencoded',
              'User-Agent'=>'Gitlab Ruby Gem 4.3.0'
            })
      .to_return(status: 200, body: '[{"id": "6956b5115ec7a870ac082154528f814085578a61", "name": "controls", "type": "tree", "path": "controls", "mode": "040000"},
           {"id": "d564d0bc3dd917926892c55e3706cc116d5b165e", "name": "libraries", "type": "tree", "path": "libraries", "mode": "040000"},
           {"id": "8e52bbc25b0fe1fec20ba890e0811e529f56b12c", "name": "README.md", "type": "blob", "path": "README.md", "mode": "100644"},
           {"id": "3c969e2cfe52151e7a97e61e95570cd7ae44a663", "name": "inspec.yml", "type": "blob", "path": "inspec.yml", "mode": "100644"}]', headers: {})
    stub_request(:get, 'https://gitlab.company.com/api/v3/projects/12187/repository/tree')
      .with(headers: {
              'Accept'=>'application/json',
              'Authorization'=>'Bearer MyString5345345645766',
              'Content-Type'=>'application/x-www-form-urlencoded',
              'User-Agent'=>'Gitlab Ruby Gem 4.4.0'
            })
      .to_return(status: 200, body: '[{"id": "6956b5115ec7a870ac082154528f814085578a61", "name": "controls", "type": "tree", "path": "controls", "mode": "040000"},
            {"id": "d564d0bc3dd917926892c55e3706cc116d5b165e", "name": "libraries", "type": "tree", "path": "libraries", "mode": "040000"},
            {"id": "8e52bbc25b0fe1fec20ba890e0811e529f56b12c", "name": "README.md", "type": "blob", "path": "README.md", "mode": "100644"},
            {"id": "3c969e2cfe52151e7a97e61e95570cd7ae44a663", "name": "inspec.yml", "type": "blob", "path": "inspec.yml", "mode": "100644"}]', headers: {})
    stub_request(:get, 'https://gitlab.company.com/api/v3/projects/11892/repository/tree')
      .with(headers: {
              'Accept'=>'application/json',
          'Authorization'=>'Bearer MyString5345345645766',
          'Content-Type'=>'application/x-www-form-urlencoded',
          'User-Agent'=>'Gitlab Ruby Gem 4.3.0'
            })
      .to_return(status: 200, body: '', headers: {})
    stub_request(:get, 'https://gitlab.company.com/api/v3/projects/11892/repository/tree')
      .with(headers: {
              'Accept'=>'application/json',
          'Authorization'=>'Bearer MyString5345345645766',
          'Content-Type'=>'application/x-www-form-urlencoded',
          'User-Agent'=>'Gitlab Ruby Gem 4.4.0'
            })
      .to_return(status: 200, body: '', headers: {})
    stub_request(:get, 'https://gitlab.company.com/api/v3/projects/11870/repository/tree')
      .with(headers: {
              'Accept'=>'application/json',
           'Authorization'=>'Bearer MyString5345345645766',
           'Content-Type'=>'application/x-www-form-urlencoded',
           'User-Agent'=>'Gitlab Ruby Gem 4.3.0'
            })
      .to_return(status: 200, body: '', headers: {})
    stub_request(:get, 'https://gitlab.company.com/api/v3/projects/11870/repository/tree')
      .with(headers: {
              'Accept'=>'application/json',
           'Authorization'=>'Bearer MyString5345345645766',
           'Content-Type'=>'application/x-www-form-urlencoded',
           'User-Agent'=>'Gitlab Ruby Gem 4.4.0'
            })
      .to_return(status: 200, body: '', headers: {})
  end

end
